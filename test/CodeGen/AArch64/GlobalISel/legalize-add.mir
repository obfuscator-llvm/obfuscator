# RUN: llc -O0 -run-pass=legalizer -global-isel %s -o - | FileCheck %s

--- |
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"
  target triple = "aarch64--"
  define void @test_scalar_add_big() {
  entry:
    ret void
  }
  define void @test_scalar_add_small() {
  entry:
    ret void
  }
  define void @test_vector_add() {
  entry:
    ret void
  }
...

---
name:            test_scalar_add_big
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
  - { id: 8, class: _ }
body: |
  bb.0.entry:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_scalar_add_big
    ; CHECK-NOT: G_MERGE_VALUES
    ; CHECK-NOT: G_UNMERGE_VALUES
    ; CHECK-DAG: [[CARRY0_32:%.*]](s32) = G_CONSTANT i32 0
    ; CHECK-DAG: [[CARRY0:%[0-9]+]](s1) = G_TRUNC [[CARRY0_32]]
    ; CHECK: [[RES_LO:%.*]](s64), [[CARRY:%.*]](s1) = G_UADDE %0, %2, [[CARRY0]]
    ; CHECK: [[RES_HI:%.*]](s64), {{%.*}}(s1) = G_UADDE %1, %3, [[CARRY]]
    ; CHECK-NOT: G_MERGE_VALUES
    ; CHECK-NOT: G_UNMERGE_VALUES
    ; CHECK: %x0 = COPY [[RES_LO]]
    ; CHECK: %x1 = COPY [[RES_HI]]

    %0(s64) = COPY %x0
    %1(s64) = COPY %x1
    %2(s64) = COPY %x2
    %3(s64) = COPY %x3
    %4(s128) = G_MERGE_VALUES %0, %1
    %5(s128) = G_MERGE_VALUES %2, %3
    %6(s128) = G_ADD %4, %5
    %7(s64), %8(s64) = G_UNMERGE_VALUES %6
    %x0 = COPY %7
    %x1 = COPY %8
...

---
name:            test_scalar_add_small
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
body: |
  bb.0.entry:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_scalar_add_small
    ; CHECK: [[OP0:%.*]](s32) = G_ANYEXT %2(s8)
    ; CHECK: [[OP1:%.*]](s32) = G_ANYEXT %3(s8)
    ; CHECK: [[RES32:%.*]](s32) = G_ADD [[OP0]], [[OP1]]
    ; CHECK: [[RES:%.*]](s8) = G_TRUNC [[RES32]](s32)

    %0(s64) = COPY %x0
    %1(s64) = COPY %x1
    %2(s8) = G_TRUNC %0
    %3(s8) = G_TRUNC %1
    %4(s8) = G_ADD %2, %3
    %5(s64) = G_ANYEXT %4
    %x0 = COPY %5
...

---
name:            test_vector_add
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
  - { id: 8, class: _ }
body: |
  bb.0.entry:
    liveins: %q0, %q1, %q2, %q3
    ; CHECK-LABEL: name: test_vector_add
    ; CHECK-NOT: G_EXTRACT
    ; CHECK-NOT: G_SEQUENCE
    ; CHECK: [[RES_LO:%.*]](<2 x s64>) = G_ADD %0, %2
    ; CHECK: [[RES_HI:%.*]](<2 x s64>) = G_ADD %1, %3
    ; CHECK-NOT: G_EXTRACT
    ; CHECK-NOT: G_SEQUENCE
    ; CHECK: %q0 = COPY [[RES_LO]]
    ; CHECK: %q1 = COPY [[RES_HI]]

    %0(<2 x s64>) = COPY %q0
    %1(<2 x s64>) = COPY %q1
    %2(<2 x s64>) = COPY %q2
    %3(<2 x s64>) = COPY %q3
    %4(<4 x s64>) = G_MERGE_VALUES %0, %1
    %5(<4 x s64>) = G_MERGE_VALUES %2, %3
    %6(<4 x s64>) = G_ADD %4, %5
    %7(<2 x s64>), %8(<2 x s64>) = G_UNMERGE_VALUES %6
    %q0 = COPY %7
    %q1 = COPY %8
...
